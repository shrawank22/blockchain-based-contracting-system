{
  "contractName": "BidContract",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/bid.sol\":\"BidContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/bid.sol\":{\"keccak256\":\"0x722d397864c4dd59a50df9df09ef3172d80e7042b9940f71b01f30017fb3a5bf\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://b6af6c434fce50bd822393f781787c3769982e5c32902d7c355a50323783c11a\",\"dweb:/ipfs/QmPpZP6CN2u1deFuRki2pm3FBS4YNVLb7mWKJt58q81hqj\"]},\"project:/contracts/entities.sol\":{\"keccak256\":\"0xbff01387234861e0638d917efe0a19634c63219231a9064618291576bfae703b\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://5ad827b4dce21ff0e6f99e792b588fb380043a3660baf4dc66d2eb7d90894df5\",\"dweb:/ipfs/QmSzc75cdZx2xJvWJjkF3LTdmPyd8JdERnzUnym5wKs5cD\"]},\"project:/contracts/party.sol\":{\"keccak256\":\"0xd519980c8d3de343eab724e01f54ab5448174f2c3b9ca8a6ba5245f8aed92576\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://cb2645a089dc3bcf7050583945bc36a0dc021af48697c3ddf4b912e548145ffa\",\"dweb:/ipfs/QmUg6HXMxWsNCYcKodXZaEBWdkfBeNA8Yjc4iCrLscWeH3\"]}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212201e8a1e0cca2b93919aae23c9f90ec1f0ac648126ab7c186ba9b91722e472d89364736f6c63430008110033",
  "deployedBytecode": "0x6080604052600080fdfea26469706673582212201e8a1e0cca2b93919aae23c9f90ec1f0ac648126ab7c186ba9b91722e472d89364736f6c63430008110033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "230:4629:0:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "230:4629:0:-:0;;;;;",
  "source": "// SPDX-License-Identifier: UNLICENSED\r\n\r\n//the version of solidity that is compatible\r\npragma solidity >=0.7.0 <0.9.0; \r\n\r\nimport {ProjectStatus, Tender, Bid} from './entities.sol';\r\nimport {PartyContract} from \"./party.sol\";\r\n\r\ncontract BidContract{\r\n\r\n//     address private owner;\r\n//     PartyContract public partyRef;\r\n\r\n//     constructor(PartyContract _partyRef) {\r\n//         partyRef = _partyRef;\r\n//         owner = msg.sender; \r\n//     }\r\n\r\n\r\n\r\n//     // Function for creating bids on tenders\r\n//     function createBid(address _partyAddress, address _tenderId, string memory _message, uint256 _amount, string memory status) public{\r\n//         Tender storage tender = partyRef.parties[_partyAddress].tenders[_tenderId];\r\n//         require(partyRef.parties[msg.sender].partyAddress != address(0), \"Party does not exist\");\r\n//         require(tender.budget > 0, \"Tender does not exist\");\r\n//         require(tender.isOpen, \"Tender is not open for bids\");\r\n//         require(block.timestamp < tender.deadline, \"Bidding has ended\");\r\n//         require(msg.sender != tender.creator, \"Owner cannot bid on their own tender\");\r\n\r\n//         Bid memory newBid = Bid({\r\n//             message: _message,\r\n//             amount: _amount,\r\n//             bidder: msg.sender,\r\n//             bidStatus: status\r\n//         });\r\n//         uint256 bidId = tender.bidIds.length;\r\n//         tender.bidIds.push(bidId);\r\n//         tender.bids[bidId] = newBid;\r\n//     }\r\n\r\n//    // For getting bid count on a particular tender\r\n//    function getBidCount(address _partyAddress, uint256 _tenderId) public view returns (uint256) {\r\n//     \trequire(partyRef.parties[_partyAddress].tenders[_tenderId].budget > 0, \"Tender does not exist\");\r\n//     \treturn partyRef.parties[_partyAddress].tenders[_tenderId].bidIds.length;\r\n//     }\r\n\r\n//     // For getting bid details like message, amount, address of bidders \r\n//     function getBidDetails(address _partyAddress, uint256 _tenderId, uint256 _bidId) public view returns (string memory, uint256, address) {\r\n//     \tTender storage tender = partyRef.parties[_partyAddress].tenders[_tenderId];\r\n// \trequire(tender.bids[_bidId].amount > 0, \"Bid does not exist\");\r\n//     \treturn (\r\n// \t\ttender.bids[_bidId].message,\r\n// \t\ttender.bids[_bidId].amount,\r\n// \t\ttender.bids[_bidId].bidder\r\n//     \t);\r\n//     }\r\n\r\n//     function getAllBids(address _partyAddress, uint256 _tenderId) public view returns (Bid[] memory) {\r\n//         Tender storage tender = partyRef.parties[_partyAddress].tenders[_tenderId];\r\n//         require(tender.bidIds.length > 0, \"No bids exists\");\r\n//         Bid[] memory bids = new Bid[](tender.bidIds.length);\r\n//         for (uint256 i = 0; i < tender.bidIds.length; i++) {\r\n//             bids[i] = tender.bids[i];\r\n//         }\r\n//         return (bids);\r\n//     }\r\n\r\n//     modifier isOwner() {\r\n//         require(msg.sender == owner, \"Caller is not owner\");\r\n//         _;\r\n//     }\r\n\r\n//     modifier isValidTender(uint256 tenderId) {\r\n//         (string memory title, string memory description, uint256 budget, bool isOpen, uint256 deadline, ProjectStatus projectStatus) = partyRef.getTenderDetails(msg.sender, tenderId);\r\n//         require(block.timestamp >= deadline && projectStatus == ProjectStatus.CLOSED);\r\n//         _;\r\n//     }\r\n\r\n//     function selectWinnerBid(address _partyAddress, uint256 projectId ) public view isOwner isValidTender(projectId) returns (Bid[] memory) {\r\n//         //invoke this function once deadline is crossed and can be invoked by project issue party, make sure this project is not assigned to anyone------modifier\r\n//         // get all the bids for pt\r\n//         Bid[] memory bids = getAllBids(_partyAddress, projectId);\r\n//         require(bids.length > 0, \"No bids exists\");\r\n//         // sort bids by price\r\n//         for (uint i = 1; i < bids.length; i++){\r\n//             for (uint j = 0; j < i; j++){\r\n//                 if (bids[i].amount > bids[j].amount) {\r\n//                     Bid memory x = bids[i];\r\n//                     bids[i] = bids[j];\r\n//                     bids[j] = x;\r\n//                 }s\r\n//             }\r\n//         }\r\n//         uint256 shortListedBidsCount = (bids.length < 5) ? bids.length : 5; \r\n//         Bid[] memory shortListedBids = new Bid[](shortListedBidsCount);\r\n//         for (uint i = 0; i < shortListedBidsCount; i++){\r\n//             shortListedBids[i] = bids[i];\r\n//         }\r\n\r\n//         return shortListedBids;\r\n//         //returns a list of top 5 bidders and history of bidders\r\n\r\n//         // - in case of a tie, the bidder with the largest \"trust\" is given the project. ( Trust in this context is measured in terms of the number of previous projects done and the token assets a party has.)\r\n//         // update the status of each bid to APPROVED / REJECTED from PENDING.\r\n//     }  \r\n\r\n}",
  "sourcePath": "C:\\Users\\sabba\\OneDrive\\Documents\\BlockchainProject\\blockchain-based-contracting-system\\contracts\\bid.sol",
  "ast": {
    "absolutePath": "project:/contracts/bid.sol",
    "exportedSymbols": {
      "Bid": [
        38
      ],
      "BidContract": [
        8
      ],
      "PartyContract": [
        929
      ],
      "ProjectStatus": [
        20
      ],
      "Tender": [
        71
      ]
    },
    "id": 9,
    "license": "UNLICENSED",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.7",
          ".0",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "88:31:0"
      },
      {
        "absolutePath": "project:/contracts/entities.sol",
        "file": "./entities.sol",
        "id": 5,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 9,
        "sourceUnit": 95,
        "src": "124:58:0",
        "symbolAliases": [
          {
            "foreign": {
              "id": 2,
              "name": "ProjectStatus",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 20,
              "src": "132:13:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 3,
              "name": "Tender",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 71,
              "src": "147:6:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 4,
              "name": "Bid",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 38,
              "src": "155:3:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/party.sol",
        "file": "./party.sol",
        "id": 7,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 9,
        "sourceUnit": 930,
        "src": "184:42:0",
        "symbolAliases": [
          {
            "foreign": {
              "id": 6,
              "name": "PartyContract",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 929,
              "src": "192:13:0",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "BidContract",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 8,
        "linearizedBaseContracts": [
          8
        ],
        "name": "BidContract",
        "nameLocation": "239:11:0",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 9,
        "src": "230:4629:0",
        "usedErrors": []
      }
    ],
    "src": "88:4771:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.17+commit.8df45f5f.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.13",
  "updatedAt": "2023-04-03T06:45:18.624Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}